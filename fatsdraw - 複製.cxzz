/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== fatsdraw.c ========
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdbool.h>

/* XDCtools Header files */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

/* BIOS Header files */
#include <ti/sysbios/BIOS.h>
#include <ti/sysbios/knl/Clock.h>
#include <ti/sysbios/knl/Task.h>

/* TI-RTOS Header files */
#include <ti/drivers/GPIO.h>
#include <ti/drivers/SDSPI.h>

#include <ti/mw/fatfs/ff.h>

/* Example/Board Header files */
#include "Board.h"
#include "msp.h"

//-----ADS1281----------------------

unsigned long ads1281_data =0;
float ads1281_value = 0;
//-----ADS1281----------------------


/* Buffer size used for the file copy process */
#ifndef CPY_BUFF_SIZE
#define CPY_BUFF_SIZE       2048
#endif

/* String conversion macro */
#define STR_(n)             #n
#define STR(n)              STR_(n)

/* Drive number used for FatFs */
#define DRIVE_NUM           0
#define TASKSTACKSIZE       768

 char  inputfile[30];
const char outputfile[] = STR(DRIVE_NUM)":output88.txt";



Task_Struct task0Struct;
Char task0Stack[TASKSTACKSIZE];

unsigned char cpy_buff[CPY_BUFF_SIZE + 1];

FIL src;
//-  adc 1sec = 100 sample * 3Byte = 300Bytes
int fileSize = 1800; //--- 60 sec 1 file
int adc_counter = 0;


int start_loggering = 1; //-- start REC
int databuuer_is_Full = 0;

char textarray[300];
char data_buffer[300];


/*
 *  ======== taskFxn ========
 *  Task to perform a file copy
 *
 *  Task tries to open an existing file inputfile[]. If the file doesn't
 *  exist, create one and write some known content into it.
 *  The contents of the inputfile[] are then copied to an output file
 *  outputfile[]. Once completed, the contents of the output file are
 *  printed onto the system console (stdout).
 *
 *  Task for this function is created statically. See the project's .cfg file.
 */
Void taskFxn(UArg arg0, UArg arg1)
{
    FRESULT fresult;
    SDSPI_Handle sdspiHandle;
    SDSPI_Params sdspiParams;
    /* Variables to keep track of the file copy progress */

    unsigned int bytesWritten = 0;

    /* Mount and register the SD Card */
    SDSPI_Params_init(&sdspiParams);
    sdspiHandle = SDSPI_open(Board_SDSPI0, DRIVE_NUM, &sdspiParams);
    if (sdspiHandle == NULL) {
        System_abort("Error starting the SD card\n");
    }
    else {
        System_printf("Drive %u is mounted\n", DRIVE_NUM);
    }


    /* Try to open the source file */


    int data_counter = 0;
    int file_sn = 0;

    	while(start_loggering==0);

        while(start_loggering){


       		/* Open file for writing */

    	    sprintf(inputfile,"%05ld.aat",file_sn);



    	    fresult = f_open(&src, inputfile, FA_CREATE_NEW|FA_WRITE);

    	    if (fresult == FR_OK) {
           		// System_printf("Creating a new file \"%s\"...", inputfile);
    	    	 file_sn++;
           		for(data_counter = 0;data_counter<fileSize;data_counter++){

           			while(!databuuer_is_Full);

           			GPIO_toggle(Board_TEST_P2_5);

           			f_write(&src, textarray, 300, &bytesWritten);
           			f_write(&src, textarray, 300, &bytesWritten);
           			f_write(&src, textarray, 300, &bytesWritten);
           			f_write(&src, textarray, 300, &bytesWritten);

           			GPIO_toggle(Board_TEST_P2_5);

           			databuuer_is_Full = 0;
           			GPIO_toggle(Board_LED1);
           		}

           		f_sync(&src);
           		f_close(&src);
           		//GPIO_write(Board_LED1, Board_LED_ON);
        		/* Reset the internal file pointer */	//		f_lseek(&src, 0);
           	}
           	else {
           		System_printf("Using existing copy of \"%s\"\n", inputfile);
           	}

        }


    /* Stopping the SDCard */
    SDSPI_close(sdspiHandle);
    System_printf("Drive %u unmounted\n", DRIVE_NUM);



    //BIOS_exit(0);
}



int avg_c = 0;

void gpioButtonFxn0(unsigned int index)
{
	int i;
    /* Clear the GPIO interrupt and toggle an LED */
	avg_c++;
	if(avg_c==10){



	//GPIO_toggle(Board_LED0);

    ads1281_data = 0;

    for(i=0;i<32;i++){

    	GPIO_write(Board_ADS1281_SCLK, 1);

    	ads1281_data = (ads1281_data<<1) | (GPIO_read(Board_ADS1281_DOUT));

         GPIO_write(Board_ADS1281_SCLK, 0);
    }

    if(ads1281_data > 0x7fffffff) {
      ads1281_data = ads1281_data - 0x80000000 ;
    }
    else{
      ads1281_data = ads1281_data + 0x80000000;
    }
    ads1281_value = ((double)ads1281_data / 0xffffffff)*5 - 2.5;

    data_buffer[adc_counter] = (ads1281_data >> 24 ) & 0xff ;
    data_buffer[adc_counter+1] = (ads1281_data >> 16 ) & 0xff ;
    data_buffer[adc_counter+2] = (ads1281_data >> 8 ) & 0xff ;
      adc_counter+=3;

      if(adc_counter==300){

    	  if(databuuer_is_Full==1)GPIO_write(Board_LED0, Board_LED_ON);
    	  memcpy(textarray,data_buffer,300);
    	  adc_counter = 0;
    	  databuuer_is_Full = 1;

      }

    	avg_c = 0;
	}

   // ads1281_value = 0;



}


/*
 *  ======== main ========
 */
int main(void)
{

/*	    // Configure RTC
	    RTCCTL0_H = RTCKEY_H ;                 // Unlock RTC key protected registers
	    RTCCTL0_L |= RTCTEVIE ;
	    RTCCTL0_L &= ~(RTCTEVIFG);
	    RTCCTL1 = RTCBCD | RTCHOLD ;
	    // RTC enable, BCD mode, RTC hold
	    // enable RTC read ready interrupt
	    // enable RTC time event interrupt

	    RTCYEAR = 0x2010;                         // Year = 0x2010
	    RTCMON = 0x4;                             // Month = 0x04 = April
	    RTCDAY = 0x05;                            // Day = 0x05 = 5th
	    RTCDOW = 0x01;                            // Day of week = 0x01 = Monday
	    RTCHOUR = 0x10;                           // Hour = 0x10
	    RTCMIN = 0x32;                            // Minute = 0x32
	    RTCSEC = 0x45;                            // Seconds = 0x45

	    RTCADOWDAY = 0x2;                         // RTC Day of week alarm = 0x2
	    RTCADAY = 0x20;                           // RTC Day Alarm = 0x20
	    RTCAHOUR = 0x10;                          // RTC Hour Alarm
	    RTCAMIN = 0x23;                           // RTC Minute Alarm

	    RTCCTL1 &= ~(RTCHOLD);                    // Start RTC calendar mode

	    RTCCTL0_H = 0;                            // Lock the RTC registers

	    __enable_interrupt();
	    NVIC->ISER[0] = 1 << ((RTC_C_IRQn) & 31);
*/
	 //---------RTC---------


    Task_Params taskParams;

    /* Call board init functions */
    Board_initGeneral();
    Board_initGPIO();
    Board_initSDSPI();

    /* Construct file copy Task thread */
    Task_Params_init(&taskParams);
    taskParams.stackSize = TASKSTACKSIZE;
    taskParams.stack = &task0Stack;


    //Task_construct(&task0Struct, (Task_FuncPtr)taskFxn, &taskParams, NULL);
    Task_construct(&task0Struct, (Task_FuncPtr)taskFxn, &taskParams, NULL);

    /* Turn on user LED */
    GPIO_write(Board_LED0, Board_LED_OFF);
    GPIO_write(Board_LED1, Board_LED_OFF);

    System_printf("Starting the FatSD Raw example\n");


    GPIO_setCallback(Board_ADS1281_DRDY, gpioButtonFxn0);

    /* Enable interrupts */
    GPIO_enableInt(Board_ADS1281_DRDY);


    /* Start BIOS */
    BIOS_start();

    return (0);
}

//----------------------
/*
void RTC_C_IRQHandler(void)
{

    if (RTCCTL0 & RTCTEVIFG)
    {
        P1OUT ^= BIT0;
        RTCCTL0_H = RTCKEY_H ;
        RTCCTL0_L &= ~RTCTEVIFG;
        RTCCTL0_H = 0;
    }

}
*/
/*DWORD get_fattime(void)
{
 uint32_t retValue = 0;
 uint8_t year = 0,month = 0,day = 0,hour = 0,minuite = 0,second = 0;
 year = 12;
 month = 12;
 day = 22;
 hour = 10;
 minuite = 6;
 second = 30/2;
 retValue = (uint32_t)year<<25 | (uint32_t)month<<21 | (uint32_t)day<<16 | (uint32_t)hour<<11 | (uint32_t)minuite<<5 | second;
 return retValue;
}*/
